- QUESTION 1 -
10.times{|i| puts "The Flintstones Rock!".rjust("The Flintstones Rock!".size + i)}

or

10.times { |number| puts (" " * number) + "The Flintstones Rock!" }

- QUESTION 2 -
The '+' operator can't combine two different data types, in this case a string and integer.

1. Use the #to_s method to convert the (40+2) like:
puts "the value of 40 + 2 is " + (40 + 2).to_s

2. Use #{}
puts "The value of 40 + 2 is #{40 + 2}" 

- QUESTION 3 -
def factors(number)
  dividend = number
  divisors = []
  while dividend > 0
    divisors << number / dividend if number % dividend == 0
    dividend -= 1
  end
  divisors
end

p factors(0)

Bonus 1: The modulo operator '%' returns the remainder of two number divided by each other. So if the remainder is '0' than the number is a factor.

Bonus 2: The 'divisors' is placed at the end of the method so it's value will be returned.

- QUESTION 4 -
I would use '+' to modify the buffer unless the intent is to mutate the original buffer element. So yes there is a difference between '<<' and '+'. The '<<' will mutate the original argument passed to the method and the '+' will not.

- QUESTION 5 -
The "limit" variable is defined outside the scope of the #fib method and so cannot be used by the method. Instead move the "limit = 15" assignment into the method or pass it as an additional argument.

- QUESTION 6 -
def tricky_method(a_string_param, an_array_param)
  a_string_param += "rutabaga"
  an_array_param += "rutabaga"
  return a_string_param, an_array_param
end

my_string = "pumpkins"
my_array = ["pumpkins"]

my_string, my_array = tricky_method(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"

- QUESTION 7 -
34

- QUESTION 8 -
The program does not re-assign 'demo_hash' so the original hash will be affected. If 'demo_hash' had been re-assigned first the data could have been ok.

- QUESTION 9 -
"paper"

- QUESTION 10 -
"no"














